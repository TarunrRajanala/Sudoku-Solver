# -*- coding: utf-8 -*-
"""Untitled1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1VyOCs_L9nRHtClERZIh7JcQOrO5zWpRY
"""

from pyomo.environ import *

#size of the Sudoku grid and subgrids
N = 9
sqrt_N = 3

#Pre-filled cells from original grid
pre_filled_cells = [
    (1, 1, 8),
    (2, 3, 3), (2, 4, 6),
    (3, 7, 2), (3, 2, 7), (3, 5, 9),
    (4, 2, 5),(4, 6, 7), (5, 5, 4), (5, 6, 5), (5, 7, 7),
    (6, 4, 1), (6, 8, 3),
    (7, 3, 1), (7, 8, 6), (7, 9, 8),
    (8, 3, 8), (8, 4, 5),(8, 8, 1),
    (9, 2, 9), (9, 7, 4)
]

#Display initial grid
initial_grid = [[0 for _ in range(N)] for _ in range(N)]
for r, c, value in pre_filled_cells:
    initial_grid[r-1][c-1] = value

print("Initial Sudoku Grid:")
for row in initial_grid:
    print(" ".join(str(num) if num != 0 else "." for num in row))
print("\nSolving...\n")

#model
model = ConcreteModel()

#Decision Variables: x[r, c, n] = 1 if number n is in cell (r, c), 0 otherwise
model.x = Var(range(1, N+1), range(1, N+1), range(1, N+1), within=Binary)


#Constraint 1: Each cell contains exactly one number
model.cell_constraint = ConstraintList()
for r in range(1, N+1):
    for c in range(1, N+1):
        model.cell_constraint.add(sum(model.x[r, c, n] for n in range(1, N+1)) == 1)

#Constraint 2: Each number appears exactly once in each row
model.row_constraint = ConstraintList()
for r in range(1, N+1):
    for n in range(1, N+1):
        model.row_constraint.add(sum(model.x[r, c, n] for c in range(1, N+1)) == 1)

#Constraint 3: Each number  appears exactly once in each column
model.col_constraint = ConstraintList()
for c in range(1, N+1):
    for n in range(1, N+1):
        model.col_constraint.add(sum(model.x[r, c, n] for r in range(1, N+1)) == 1)

#Constraint 4: Each number  appears exactly once in each sub grid
model.subgrid_constraint = ConstraintList()
for i in range(0, sqrt_N):
    for j in range(0, sqrt_N):
        for n in range(1, N+1):
            model.subgrid_constraint.add(
                sum(model.x[r, c, n] for r in range(i * sqrt_N + 1, (i + 1) * sqrt_N + 1)
                                    for c in range(j * sqrt_N + 1, (j + 1) * sqrt_N + 1)) == 1
            )

#Constraint 5: Pre filled cells must hold their values
model.prefill_constraint = ConstraintList()
for r, c, value in pre_filled_cells:
    model.prefill_constraint.add(model.x[r, c, value] == 1)

#Objective function
model.obj = Objective(expr=0, sense=maximize)

#Solve the model
#solver = SolverFactory('glpk')  # Use GLPK solver
result = solver.solve(model)

#Print the solution if feasible
if result.solver.status == SolverStatus.ok and result.solver.termination_condition == TerminationCondition.optimal:
    solution = [[0 for _ in range(N)] for _ in range(N)]
    for r in range(1, N+1):
        for c in range(1, N+1):
            for n in range(1, N+1):
                if model.x[r, c, n].value == 1:
                    solution[r-1][c-1] = n
    #Print solved Sudoku grid
    print("Solved Sudoku Grid:")
    for row in solution:
        print(" ".join(str(num) for num in row))
else:
    print("No feasible solution found.")
